# input: unordered array with single duplicate element
# output: the duplicate value (the value that occurs twice)

# explicit requirements:
# implicit requirements:

# DS: set, array

# Algo

# init seen set
# iterate through array
# for each element
#   if element in seen
#     return element
#   else
#     add element to seen

# with set
# require "set"
# def find_dup(arr)
#   arr.each_with_object(seen = Set.new) { |e, seen| seen.include?(e) ? (return e) : seen << e }
# end

# with hashmap
# def find_dup(arr)
#   arr.each_with_object(seen = {}) { |e| seen.include?(e) ? (return e) : seen[e] = true }
# end

# loosely equivalent to
# def find_dup(arr)
#   arr.tally.key(2)
# end

require "benchmark"

test_list = [
  18,
  9,
  36,
  96,
  31,
  19,
  54,
  75,
  42,
  15,
  38,
  25,
  97,
  92,
  46,
  69,
  91,
  59,
  53,
  27,
  14,
  61,
  90,
  81,
  8,
  63,
  95,
  99,
  30,
  65,
  78,
  76,
  48,
  16,
  93,
  77,
  52,
  49,
  37,
  29,
  89,
  10,
  84,
  1,
  47,
  68,
  12,
  33,
  86,
  60,
  41,
  44,
  83,
  35,
  94,
  73,
  98,
  3,
  64,
  82,
  55,
  79,
  80,
  21,
  39,
  72,
  13,
  50,
  6,
  70,
  85,
  87,
  51,
  17,
  66,
  20,
  28,
  26,
  2,
  22,
  40,
  23,
  71,
  62,
  73,
  32,
  43,
  24,
  4,
  56,
  7,
  34,
  57,
  74,
  45,
  11,
  88,
  67,
  5,
  58,
]
time = Benchmark.realtime { (1..1_000_000).each { find_dup(test_list) } }
p "#{time * 1000} ms"

# p find_dup([2, 2]) == 2
# p find_dup([4, 2, 4]) == 4
# p find_dup([1, 5, 3, 1]) == 1
# p find_dup(
#   [
#     18,
#     9,
#     36,
#     96,
#     31,
#     19,
#     54,
#     75,
#     42,
#     15,
#     38,
#     25,
#     97,
#     92,
#     46,
#     69,
#     91,
#     59,
#     53,
#     27,
#     14,
#     61,
#     90,
#     81,
#     8,
#     63,
#     95,
#     99,
#     30,
#     65,
#     78,
#     76,
#     48,
#     16,
#     93,
#     77,
#     52,
#     49,
#     37,
#     29,
#     89,
#     10,
#     84,
#     1,
#     47,
#     68,
#     12,
#     33,
#     86,
#     60,
#     41,
#     44,
#     83,
#     35,
#     94,
#     73,
#     98,
#     3,
#     64,
#     82,
#     55,
#     79,
#     80,
#     21,
#     39,
#     72,
#     13,
#     50,
#     6,
#     70,
#     85,
#     87,
#     51,
#     17,
#     66,
#     20,
#     28,
#     26,
#     2,
#     22,
#     40,
#     23,
#     71,
#     62,
#     73,
#     32,
#     43,
#     24,
#     4,
#     56,
#     7,
#     34,
#     57,
#     74,
#     45,
#     11,
#     88,
#     67,
#     5,
#     58,
#   ],
# ) == 73
